# -*- coding: utf-8 -*-
"""text2Image_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vEdP7Y4__n9NxfC0j7tNwl9vIOB90pGf
"""

!pip install googletrans==3.1.0a0
!pip install --upgrade diffusers transformers -q

! pip install gradio

from googletrans import Translator
from pathlib import Path
import tqdm
import torch
import pandas as pd
import numpy as np
from diffusers import StableDiffusionPipeline
from transformers import pipeline, set_seed
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import cv2

def get_translation(text,dest_lang):
  translator = Translator()
  translated_text = translator.translate(text, dest=dest_lang)
  return translated_text.text

class CFG:
    device = "cuda"
    seed = 42
    generator = torch.Generator(device).manual_seed(seed)
    image_gen_steps = 35
    image_gen_model_id = "stabilityai/stable-diffusion-2"
    image_gen_size = (900,900)
    image_gen_guidance_scale = 9
    prompt_gen_model_id = "gpt3"
    prompt_dataset_size = 6
    prompt_max_length = 12

image_gen_model = StableDiffusionPipeline.from_pretrained(
    CFG.image_gen_model_id, torch_dtype=torch.float16,
    revision="fp16", use_auth_token='your_hugging_face_auth_token', guidance_scale=9
)
image_gen_model = image_gen_model.to(CFG.device)

image_gen_model

def generate_image(prompt, model):
    image = model(
        prompt, num_inference_steps=CFG.image_gen_steps,
        generator=CFG.generator,
        guidance_scale=CFG.image_gen_guidance_scale
    ).images[0]

    image = image.resize(CFG.image_gen_size)
    return image

# s=input()
# translation = get_translation(s,"en")
# generate_image(translation, image_gen_model)

import gradio as gr
from PIL import Image

def text_to_image(prompt):
    image = generate_image(prompt,image_gen_model)
    return image

iface = gr.Interface(
    fn=text_to_image,
    inputs="text",
    outputs="image",
    title="Image Generation",
    description="Generate an image based on a Text prompt.",
    allow_flagging=False,
    allow_screenshot=False,
)

iface.launch()

! pip install streamlit

import streamlit as st
from PIL import Image

def text_to_image(prompt):
    image = generate_image(prompt, image_gen_model)
    return image

def main():
    st.title("Image Generation")
    st.markdown("Generate an image based on a prompt.")
    prompt = st.text_input("Enter a prompt:")

    if st.button("Generate Image"):
        generated_image = text_to_image(prompt)
        st.image(generated_image, use_column_width=True)

if __name__ == "__main__":
    main()

